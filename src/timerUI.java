import java.util.ArrayList;


/**
 *
 * @author vinnyfiore
 * 
 * fechterr@stjohns.edu
 */
public class timerUI extends javax.swing.JFrame {

    /**
     * Creates new form timerUI
     */
    public timerUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        arraySizeText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        heapTime1 = new javax.swing.JLabel();
        insertTime1 = new javax.swing.JLabel();
        bubbletime1 = new javax.swing.JLabel();
        bubbletime2 = new javax.swing.JLabel();
        inserttime2 = new javax.swing.JLabel();
        heaptime2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        heapdiftext = new javax.swing.JLabel();
        insertdiftext = new javax.swing.JLabel();
        bubblediftext = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Sort Timer"));

        StartButton.setText("Start");
        StartButton.setToolTipText("");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Size of array to sort:");

        jLabel2.setText("Pick a very large number for Heap Sort to be accurate.");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Heap Sort");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("With Array of Size X");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("With Array of Size 2X");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel7.setText("Insertion Sort");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("Bubble Sort");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel9.setText("Bubble Sort");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel10.setText("Insertion Sort");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel11.setText("Heap Sort");

        heapTime1.setText("             ");

        insertTime1.setText("             ");

        bubbletime1.setText("             ");

        bubbletime2.setText("             ");

        inserttime2.setText("             ");

        heaptime2.setText("             ");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel12.setText("Insertion Sort");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel13.setText("This is a difference of");

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel14.setText("Heap Sort");

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel15.setText("Bubble Sort");

        heapdiftext.setText("             ");

        insertdiftext.setText("             ");

        bubblediftext.setText("             ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(heapTime1)
                            .addComponent(jLabel11)
                            .addComponent(heaptime2)
                            .addComponent(jLabel14)
                            .addComponent(heapdiftext))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(insertTime1)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(inserttime2)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(insertdiftext))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bubbletime1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bubbletime2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bubblediftext, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(24, 24, 24))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(arraySizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StartButton))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartButton)
                    .addComponent(jLabel1)
                    .addComponent(arraySizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heapTime1)
                    .addComponent(insertTime1)
                    .addComponent(bubbletime1))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bubbletime2)
                    .addComponent(inserttime2)
                    .addComponent(heaptime2))
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel12)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bubblediftext)
                    .addComponent(insertdiftext)
                    .addComponent(heapdiftext))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(ResetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ExitButton)
                .addGap(53, 53, 53))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ResetButton)
                    .addComponent(ExitButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static int[] a;
    private static int n;
    private static int left;
    private static int right;
    private static int largest;

    
    public static void buildheap(int []a){
        n=a.length-1;
        for(int i=n/2;i>=0;i--){
            maxheap(a,i);
        }
    }
    
    public static void maxheap(int[] a, int i){ 
        left=2*i;
        right=2*i+1;
        if(left <= n && a[left] > a[i]){
            largest=left;
        }
        else{
            largest=i;
        }
        
        if(right <= n && a[right] > a[largest]){
            largest=right;
        }
        if(largest!=i){
            exchange(i,largest);
            maxheap(a, largest);
        }
    }
    
    public static void exchange(int i, int j){
        int t=a[i];
        a[i]=a[j];
        a[j]=t; 
        }
    
    public static void HeapSort(int []a0){
        a=a0;
        buildheap(a);
        
        for(int i=n;i>0;i--){
            exchange(0, i);
            n=n-1;
            maxheap(a, 0);
        }
    }
    
    
    public static void BubbleSort( int [ ] numm ){
     int j;
     boolean flag = true;   // set flag to true to begin first pass
     int temp;   //holding variable

     while ( flag )
     {
            flag= false;    //set flag to false awaiting a possible swap
            for( j=0;  j < numm.length -1;  j++ )
            {
                   if ( numm[ j ] < numm[j+1] )   // change to > for ascending sort
                   {
                           temp = numm[ j ];                //swap elements
                           numm[ j ] = numm[ j+1 ];
                           numm[ j+1 ] = temp;
                          flag = true;              //shows a swap occurred  
                  } 
            } 
      } 
} 
    
    
    public static void InsertionSort( int [ ] num){
     int q;                     // the number of items sorted so far
     int key;                // the item to be inserted
     int i;  

     for (q = 1; q < num.length; q++){    // Start with 1 (not 0)
           key = num[ q ];
           for(i = q - 1; (i >= 0) && (num[ i ] < key); i--)   // Smaller values are moving up
          {
                 num[ i+1 ] = num[ i ];
          }
         num[ i+1 ] = key;    // Put the key in its proper location
     }
}
    
    
    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
         ArrayList<Long> timesheap = new ArrayList<>();
        ArrayList<Long> times2heap = new ArrayList<>();
        
        ArrayList<Long> timesinsertion = new ArrayList<>();
        ArrayList<Long> times2insertion = new ArrayList<>();

        ArrayList<Long> timesbubble = new ArrayList<>();
        ArrayList<Long> times2bubble = new ArrayList<>();

        
    	int runs = Integer.parseInt(arraySizeText.getText());
        
    	for (int j = 0; j<10; j++){
    	        
    		int randomarrayheap[] = new int [runs];
    		int randomarrayinsertion[] = new int [(runs)/1]; 
    		int randomarraybubble[] = new int [(runs)/1]; 

    		for (int i = 0 ; i < runs ; i++){ 
    			randomarrayheap [i] = (int) (Math.random () * runs); 
    		}
                
                System.arraycopy(randomarrayheap, 0, randomarrayinsertion, 0, (randomarrayheap.length/1));
                System.arraycopy(randomarrayheap, 0, randomarraybubble, 0, (randomarrayheap.length/1));

    		
    		//Uncomment this to reveal the unsorted arrays.
//    		for(int i = 0; i < randomarraybubble.length; i++){
//            	System.out.print(randomarraybubble[i] + " ");
//        	}
        
    		//System.out.println("");
        
    		long startTime1heap = System.nanoTime();
    		HeapSort(randomarrayheap);
                //System.out.println("Heap");
    		long endTime1heap = System.nanoTime();
        	long duration1heap = (endTime1heap - startTime1heap);
                                
                long startTime1insertion = System.nanoTime();
    		InsertionSort(randomarrayinsertion);
                //System.out.println("Insertion");
    		long endTime1insertion = System.nanoTime();
        	long duration1insertion = (endTime1insertion - startTime1insertion);
                
                long startTime1bubble = System.nanoTime();
    		BubbleSort(randomarraybubble);
                //System.out.println("Bubble");
    		long endTime1bubble = System.nanoTime();
        	long duration1bubble = (endTime1bubble - startTime1bubble);        	
        	
        	timesheap.add(duration1heap);
                timesinsertion.add(duration1insertion);
        	timesbubble.add(duration1bubble);

        
    		}
    	
    	//Calculating the average. 
    	//Based on code found at:
    	//http://stackoverflow.com/questions/10465989/calculate-average-or-take-in-an-arraylist-as-a-parameter-to-a-function
    	
    	long sum1heap = 0;
        int n1heap = timesheap.size();
        for (int i = 0; i < n1heap; i++){
            sum1heap += timesheap.get(i);
        }
        double avg1heap = ((double) sum1heap) / n1heap;
        avg1heap = avg1heap/100000;
        avg1heap = Math.round(avg1heap * 100);
        avg1heap = avg1heap/100;
        heapTime1.setText(avg1heap + " ms");
        
        long sum1insertion = 0;
        int n1insertion = timesinsertion.size();
        for (int i = 0; i < n1insertion; i++){
            sum1insertion += timesinsertion.get(i);
        }
        double avg1insertion = ((double) sum1insertion) / n1insertion;
        avg1insertion = avg1insertion/100000;
        avg1insertion = Math.round(avg1insertion * 100);
        avg1insertion = avg1insertion/100;
        insertTime1.setText(avg1insertion + " ms");
        
        long sum1bubble = 0;
        int n1bubble = timesbubble.size();
        for (int i = 0; i < n1bubble; i++){
            sum1bubble += timesbubble.get(i);
        }
        double avg1bubble = ((double) sum1bubble) / n1bubble;
        avg1bubble = avg1bubble/100000;
        avg1bubble = Math.round(avg1bubble * 100);
        avg1bubble = avg1bubble/100;
        bubbletime1.setText(avg1bubble + " ms");

    	
    	
    	
    	
    	for (int j = 0; j<10; j++){
	        
    		int randomarrayheap[] = new int [runs*2]; 
                int randomarrayinsertion[] = new int [(runs*2)/1]; 
    		int randomarraybubble[] = new int [(runs*2)/1]; 

    		for (int i = 0 ; i < (runs*2) ; i++){ 
    			randomarrayheap [i] = (int) (Math.random () * (runs*2)); 
    		}
                
                System.arraycopy(randomarrayheap, 0, randomarrayinsertion, 0, randomarrayheap.length/1);
                System.arraycopy(randomarrayheap, 0, randomarraybubble, 0, randomarrayheap.length/1);
        
    		//Uncomment this to reveal the unsorted arrays.
    		/*for(int i = 0; i < myarray.length; i++){
            	System.out.print(myarray[i] + " ");
        	}
        
    		//System.out.println("");
    		 * 
    		 */
    		        
    		long startTime2heap = System.nanoTime();
    		HeapSort(randomarrayheap);
    		long endTime2heap = System.nanoTime();
        	long duration2heap = (endTime2heap - startTime2heap);
                
                long startTime2insertion = System.nanoTime();
    		InsertionSort(randomarrayinsertion);
                //System.out.println("Insertion");
    		long endTime2insertion = System.nanoTime();
        	long duration2insertion = (endTime2insertion - startTime2insertion);

                long startTime2bubble = System.nanoTime();
    		BubbleSort(randomarraybubble);
                //System.out.println("Bubble");
    		long endTime2bubble = System.nanoTime();
        	long duration2bubble = (endTime2bubble - startTime2bubble);        	
        	
        	times2heap.add(duration2heap);
                times2insertion.add(duration2insertion);
        	times2bubble.add(duration2bubble);
        
    		}
    	
    	//Calculating the average.
    	long sum2heap = 0;
        int n2heap = times2heap.size();
        for (int i = 0; i < n2heap; i++){
            sum2heap += times2heap.get(i);
        }
        double avg2heap = ((double) sum2heap) / n2heap;
        avg2heap = avg2heap/100000;

        avg2heap = Math.round(avg2heap * 100);
        avg2heap = avg2heap/100;
        heaptime2.setText(avg2heap + " ms");

        heapdiftext.setText((int)((avg2heap/avg1heap)*100) + "%");
                
        
        long sum2insertion = 0;
        int n2insertion = times2insertion.size();
        for (int i = 0; i < n2insertion; i++){
            sum2insertion += times2insertion.get(i);
        }
        double avg2insertion = ((double) sum2insertion) / n2insertion;
        avg2insertion = avg2insertion/100000;
        
        avg2insertion = Math.round(avg2insertion * 100);
        avg2insertion = avg2insertion/100;
        inserttime2.setText(avg2insertion + " ms");
        insertdiftext.setText((int)((avg2insertion/avg1insertion)*100) + "%");

        
        long sum2bubble = 0;
        int n2bubble = times2bubble.size();
        for (int i = 0; i < n2bubble; i++){
            sum2bubble += times2bubble.get(i);
        }
        double avg2bubble = ((double) sum2bubble) / n2bubble;
        avg2bubble = avg2bubble/100000;

        avg2bubble = Math.round(avg2bubble * 100);
        avg2bubble = avg2bubble/100;
        bubbletime2.setText(avg2bubble + " ms");
        bubblediftext.setText((int)((avg2bubble/avg1bubble)*100) + "%");

    
        
        
    }//GEN-LAST:event_StartButtonActionPerformed

    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        arraySizeText.setText("");
        bubblediftext.setText(" ");
        bubbletime1.setText(" ");
        bubbletime2.setText(" ");
        insertTime1.setText(" ");
        inserttime2.setText(" ");
        insertdiftext.setText(" ");
        heapdiftext.setText(" ");
        heapTime1.setText(" ");
        heaptime2.setText(" ");
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        setVisible(false);
        dispose();
        System.exit(0); 
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(timerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(timerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(timerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(timerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new timerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JTextField arraySizeText;
    private javax.swing.JLabel bubblediftext;
    private javax.swing.JLabel bubbletime1;
    private javax.swing.JLabel bubbletime2;
    private javax.swing.JLabel heapTime1;
    private javax.swing.JLabel heapdiftext;
    private javax.swing.JLabel heaptime2;
    private javax.swing.JLabel insertTime1;
    private javax.swing.JLabel insertdiftext;
    private javax.swing.JLabel inserttime2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
